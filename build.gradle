buildscript {
    repositories {
        //mavenLocal()
        mavenCentral()
        //jcenter()
    }
}

plugins {
    id "application"
    id 'java'
    id 'maven-publish'
    id 'signing'
}

// uncomment below to publish on maven central
/*
tasks.distZip.enabled = false
tasks.distTar.enabled = false

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
*/

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'ai.expert'
            artifactId 'nlapi-java-sdk'
            version '2.1.1'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Java Client for the expert.ai Natural Language API'
            name 'NL API Java'
            url 'https://github.com/therealexpertai/nlapi-java'
            organization {
                name 'expert.ai'
                url 'https://expert.ai'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/therealexpertai/nlapi-java/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/therealexpertai/nlapi-java/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/therealexpertai/nlapi-java'
                connection 'scm:git:git@github.com:therealexpertai/nlapi-java.git'
                developerConnection 'scm:git:ssh://git@github.com:therealexpertai/nlapi-java.git'
            }
            developers {
                developer {
                    name 'therealexpertai'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}


repositories {
    //mavenLocal()
    mavenCentral()
    //jcenter()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:1.18.12")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.11.1')
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1')
    implementation('com.konghq:unirest-java:3.8.06')
    implementation('com.konghq:unirest-objectmapper-jackson:3.8.06')
    implementation('org.apache.logging.log4j:log4j-api:2.13.3')
    implementation('org.apache.logging.log4j:log4j-core:2.13.3')
    compileOnly('org.projectlombok:lombok:1.18.12')
    testImplementation('junit:junit:4.12')
}

test {
    useJUnit()
    minHeapSize = "512m"
    maxHeapSize = "1G"
    failFast = true
    reports.html.enabled = true
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    filter {
        //include basic tests
        includeTestsMatching "*BasicTest"
        //include release tests
        includeTestsMatching "*ReleaseTest"
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task copyLicence(type: Copy) {
    from "${projectDir}/LICENSE"
    into "${buildDir}/resources/main/META-INF"
}

processResources.dependsOn copyLicence

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}
